package cn.junhui.初级算法.数组;

import java.util.HashMap;
import java.util.HashSet;

/**
 * 军辉
 * 2018-09-14 9:44
 * <p>
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * <p>
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 示例 1:
 * 输入:
 * {}
 * {}'5','3','.','.','7','.','.','.','.'},
 * {}'6','.','.','1','9','5','.','.','.'},
 * {}'.','9','8','.','.','.','.','6','.'},
 * {}'8','.','.','.','6','.','.','.','3'},
 * {}'4','.','.','8','.','3','.','.','1'},
 * {}'7','.','.','.','2','.','.','.','6'},
 * {}'.','6','.','.','.','.','2','8','.'},
 * {}'.','.','.','4','1','9','.','.','5'},
 * {}'.','.','.','.','8','.','.','7','9'}
 * }
 * 输出: true
 * 示例 2:
 * <p>
 * 输入:
 * {}
 * {}'8','3','.','.','7','.','.','.','.'},
 * {}'6','.','.','1','9','5','.','.','.'},
 * {}'.','9','8','.','.','.','.','6','.'},
 * {}'8','.','.','.','6','.','.','.','3'},
 * {}'4','.','.','8','.','3','.','.','1'},
 * {}'7','.','.','.','2','.','.','.','6'},
 * {}'.','6','.','.','.','.','2','8','.'},
 * {}'.','.','.','4','1','9','.','.','5'},
 * {}'.','.','.','.','8','.','.','7','9'}
 * }
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 说明:
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 */
/*
难点在于表示第i个九宫格每个格点的坐标。

观察行号规律：
第0个九宫格：000111222; 第1个九宫格：000111222; 第2个九宫格：000111222;
第3个九宫格：333444555; 第4个九宫格：333444555; 第5个九宫格：333444555;
第6个九宫格：666777888; 第7个九宫格：666777888; 第8个九宫格：666777888;
可见对于每三个九宫格行号增3；对于单个九宫格，每三个格点行号增1。
因此第i个九宫格的第j个格点的行号可表示为i/3*3+j/3（每个小九宫格j都是从0~9递增）
观察列号规律：

第0个九宫格：012012012; 第1个九宫格：345345345; 第2个九宫格：678678678;
第3个九宫格：012012012; 第4个九宫格：345345345; 第5个九宫格：678678678;
第6个九宫格：012012012; 第7个九宫格：345345345; 第8个九宫格：678678678;
可见对于下个九宫格列号增3，循环周期为3；对于单个九宫格，每个格点行号增1，周期也为3。
周期的数学表示就是取模运算mod。
因此第i个九宫格的第j个格点的列号可表示为i%3*3+j%3（每个小九宫格j都是从0~9递增）
部分填充的有效数独，不需要填充
 */
public class 有效的数独 {
    public static boolean isValidSudoku(char[][] board) {
        /*
        hashset 只储存元素  不允许存在相同的元素
        hashmap 储存键值对  不允许存在相同的键
         */
        for (int i = 0; i < 9; i++) {
            HashSet<Character> row = new HashSet();//行
            HashSet<Character> col = new HashSet();//列
            HashSet<Character> cube = new HashSet();//立方体
            for (int j = 0; j < 9; j++) {
                if (board[i][j] != '.' && !row.add(board[i][j])) {
                    return false;
                }
                if (board[j][i] != '.' && !col.add(board[j][i])) {
                    return false;
                }
                int rowindex = 3 * (i / 3) + j / 3;
                int colindex = 3 * (i % 3) + j % 3;
                if (board[rowindex][colindex] != '.' && !cube.add(board[rowindex][colindex])) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        System.out.println(isValidSudoku(board));
    }
}
